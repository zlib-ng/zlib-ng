name: CI CMake
on: [push, pull_request]
jobs:
  ci-cmake:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          Ubuntu GCC,
          Ubuntu GCC OSB -O1,
          Ubuntu GCC Link Zlib,
          Ubuntu GCC No AVX2,
          Ubuntu GCC No SSE2,
          Ubuntu GCC No SSE4,
          Ubuntu GCC No PCLMULQDQ,
          Ubuntu GCC No Opt,
          Ubuntu GCC Compat,
          Ubuntu GCC Compat No Opt,
          Ubuntu GCC Compat,
          Ubuntu GCC ARM SF,
          Ubuntu GCC ARM SF No ACLE,
          Ubuntu GCC ARM SF No Opt,
          Ubuntu GCC ARM SF Compat,
          Ubuntu GCC ARM SF Compat No Opt,
          Ubuntu GCC ARM HF,
          Ubuntu GCC ARM HF No NEON,
          Ubuntu GCC ARM HF No Opt,
          Ubuntu GCC ARM HF Compat,
          Ubuntu GCC ARM HF Compat No Opt,
          Ubuntu GCC ARM HF Compat No Neon,
          Ubuntu GCC AARCH64 Compat,
          Ubuntu GCC AARCH64 Compat No Opt,
          Ubuntu GCC PPC Compat,
          Ubuntu GCC PPC64 Compat,
          Ubuntu GCC PPC64LE Compat,
          Ubuntu GCC SPARC64 Compat,
          Ubuntu GCC S390X Compat,
          Ubuntu Clang,
          Ubuntu Clang Inflate Strict,
          Ubuntu Clang Inflate Allow Invalid Dist,
          Ubuntu Clang Debug,
          Ubuntu Clang MSAN,
          Windows MSVC Win32,
          Windows MSVC Win64,
          Windows GCC,
          Windows GCC Compat,
          Windows GCC Compat No Opt,
          macOS Clang,
          macOS GCC
        ]
        include:
          - name: Ubuntu GCC
            os: ubuntu-latest
            compiler: gcc
            cmake-args: -DWITH_SANITIZERS=ON
            codecov: ubuntu_gcc

          - name: Ubuntu GCC OSB -O1
            os: ubuntu-latest
            compiler: gcc
            cmake-args: -DWITH_SANITIZERS=ON
            build-dir: ../build
            build-src-dir: ../zlib-ng
            codecov: ubuntu_gcc_osb
            cflags: -O1 -g3

          - name: Ubuntu GCC Link Zlib
            os: ubuntu-latest
            compiler: gcc
            cmake-args: -DZLIB_LINK_SYSLIB=ON

          - name: Ubuntu GCC No AVX2
            os: ubuntu-latest
            compiler: gcc
            cmake-args: -DWITH_SANITIZERS=ON -DWITH_AVX2=OFF
            codecov: ubuntu_gcc_no_avx2

          - name: Ubuntu GCC No SSE2
            os: ubuntu-latest
            compiler: gcc
            cmake-args: -DWITH_SANITIZERS=ON -DWITH_SSE2=OFF
            codecov: ubuntu_gcc_no_sse2

          - name: Ubuntu GCC No SSE4
            os: ubuntu-latest
            compiler: gcc
            cmake-args: -DWITH_SANITIZERS=ON -DWITH_SSE4=OFF
            codecov: ubuntu_gcc_no_sse4

          - name: Ubuntu GCC No PCLMULQDQ
            os: ubuntu-latest
            compiler: gcc
            cmake-args: -DWITH_SANITIZERS=ON -DWITH_PCLMULQDQ=OFF
            codecov: ubuntu_gcc_no_pclmulqdq

          - name: Ubuntu GCC No Opt
            os: ubuntu-latest
            compiler: gcc
            cmake-args: -DWITH_NEW_STRATEGIES=OFF -DWITH_OPTIM=OFF -DWITH_SANITIZERS=ON
            codecov: ubuntu_gcc_no_opt

          - name: Ubuntu GCC Compat
            os: ubuntu-latest
            compiler: gcc
            cmake-args: -DZLIB_COMPAT=ON
            codecov: ubuntu_gcc_compat

          - name: Ubuntu GCC Compat No Opt
            os: ubuntu-latest
            compiler: gcc
            cmake-args: -DZLIB_COMPAT=ON -DWITH_NEW_STRATEGIES=OFF -DWITH_OPTIM=OFF -DWITH_SANITIZERS=ON
            codecov: ubuntu_gcc_compat_no_opt

          - name: Ubuntu GCC Compat
            os: ubuntu-latest
            compiler: gcc
            cmake-args: -DZLIB_COMPAT=ON -DWITH_SANITIZERS=ON
            codecov: ubuntu_gcc_compat_sani

          - name: Ubuntu GCC ARM SF
            os: ubuntu-latest
            compiler: arm-linux-gnueabi-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabi -DWITH_SANITIZERS=ON
            packages: qemu gcc-arm-linux-gnueabi libc-dev-armel-cross
            codecov: ubuntu_gcc_armsf

          - name: Ubuntu GCC ARM SF No ACLE
            os: ubuntu-latest
            compiler: arm-linux-gnueabi-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabi -DWITH_SANITIZERS=ON -DWITH_ACLE=OFF
            packages: qemu gcc-arm-linux-gnueabi libc-dev-armel-cross
            codecov: ubuntu_gcc_armsf_no_acle

          - name: Ubuntu GCC ARM SF No Opt
            os: ubuntu-latest
            compiler: arm-linux-gnueabi-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabi -DWITH_NEW_STRATEGIES=OFF -DWITH_OPTIM=OFF -DWITH_SANITIZERS=ON
            packages: qemu gcc-arm-linux-gnueabi libc-dev-armel-cross
            codecov: ubuntu_gcc_armsf_no_opt

          - name: Ubuntu GCC ARM SF Compat
            os: ubuntu-latest
            compiler: arm-linux-gnueabi-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabi -DZLIB_COMPAT=ON -DWITH_SANITIZERS=ON
            packages: qemu gcc-arm-linux-gnueabi libc-dev-armel-cross
            codecov: ubuntu_gcc_armsf_compat

          - name: Ubuntu GCC ARM SF Compat No Opt
            os: ubuntu-latest
            compiler: arm-linux-gnueabi-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabi -DZLIB_COMPAT=ON -DWITH_NEW_STRATEGIES=OFF -DWITH_OPTIM=OFF -DWITH_SANITIZERS=ON
            packages: qemu gcc-arm-linux-gnueabi libc-dev-armel-cross
            codecov: ubuntu_gcc_armsf_compat_no_opt

          - name: Ubuntu GCC ARM HF
            os: ubuntu-latest
            compiler: arm-linux-gnueabihf-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabihf -DWITH_SANITIZERS=ON
            packages: qemu gcc-arm-linux-gnueabihf libc-dev-armel-cross
            codecov: ubuntu_gcc_armhf

          - name: Ubuntu GCC ARM HF No NEON
            os: ubuntu-latest
            compiler: arm-linux-gnueabihf-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabihf -DWITH_SANITIZERS=ON -DWITH_NEON=OFF
            packages: qemu gcc-arm-linux-gnueabihf libc-dev-armel-cross
            codecov: ubuntu_gcc_armhf_no_neon

          - name: Ubuntu GCC ARM HF No Opt
            os: ubuntu-latest
            compiler: arm-linux-gnueabihf-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabihf -DWITH_NEW_STRATEGIES=OFF -DWITH_OPTIM=OFF -DWITH_SANITIZERS=ON
            packages: qemu gcc-arm-linux-gnueabihf libc-dev-armel-cross
            codecov: ubuntu_gcc_armhf_no_opt

          - name: Ubuntu GCC ARM HF Compat
            os: ubuntu-latest
            compiler: arm-linux-gnueabihf-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabihf -DZLIB_COMPAT=ON -DWITH_SANITIZERS=ON
            packages: qemu gcc-arm-linux-gnueabihf libc-dev-armel-cross
            codecov: ubuntu_gcc_armhf_compat

          - name: Ubuntu GCC ARM HF Compat No Opt
            os: ubuntu-latest
            compiler: arm-linux-gnueabihf-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabihf -DZLIB_COMPAT=ON -DWITH_NEW_STRATEGIES=OFF -DWITH_OPTIM=OFF -DWITH_SANITIZERS=ON
            packages: qemu gcc-arm-linux-gnueabihf libc-dev-armel-cross
            codecov: ubuntu_gcc_armhf_compat_no_opt

          - name: Ubuntu GCC ARM HF Compat No Neon
            os: ubuntu-latest
            compiler: arm-linux-gnueabihf-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake -DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabihf -DZLIB_COMPAT=ON -DWITH_NEON=OFF -DWITH_SANITIZERS=ON
            packages: qemu gcc-arm-linux-gnueabihf libc-dev-armel-cross
            codecov: ubuntu_gcc_armhf_compat_no_neon

          - name: Ubuntu GCC AARCH64 Compat
            os: ubuntu-latest
            compiler: aarch64-linux-gnu-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-aarch64.cmake -DZLIB_COMPAT=ON -DWITH_SANITIZERS=ON
            asan-options: detect_leaks=0
            packages: qemu gcc-aarch64-linux-gnu libc-dev-arm64-cross
            codecov: ubuntu_gcc_aarch64_compat

          - name: Ubuntu GCC AARCH64 Compat No Opt
            os: ubuntu-latest
            compiler: aarch64-linux-gnu-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-aarch64.cmake -DZLIB_COMPAT=ON -DWITH_NEW_STRATEGIES=OFF -DWITH_OPTIM=OFF -DWITH_SANITIZERS=ON
            asan-options: detect_leaks=0
            packages: qemu gcc-aarch64-linux-gnu libc-dev-arm64-cross
            codecov: ubuntu_gcc_aarch64_compat_no_opt

          - name: Ubuntu GCC PPC Compat
            os: ubuntu-latest
            compiler: powerpc-linux-gnu-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-powerpc.cmake -DZLIB_COMPAT=ON
            packages: qemu gcc-powerpc-linux-gnu libc-dev-powerpc-cross
            codecov: ubuntu_gcc_ppc_compat

            cflags: -static
          - name: Ubuntu GCC PPC64 Compat
            os: ubuntu-latest
            compiler: powerpc64-linux-gnu-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-powerpc64.cmake -DZLIB_COMPAT=ON
            packages: qemu gcc-powerpc64-linux-gnu libc-dev-ppc64-cross
            cflags: -static
            codecov: ubuntu_gcc_ppc64_compat

          - name: Ubuntu GCC PPC64LE Compat
            os: ubuntu-latest
            compiler: powerpc64le-linux-gnu-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-powerpc64le.cmake -DZLIB_COMPAT=ON
            packages: qemu gcc-powerpc64le-linux-gnu libc-dev-ppc64el-cross
            cflags: -static
            codecov: ubuntu_gcc_ppc64le_compat

          - name: Ubuntu GCC SPARC64 Compat
            os: ubuntu-latest
            compiler: sparc64-linux-gnu-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-sparc64.cmake -DZLIB_COMPAT=ON
            packages: qemu gcc-sparc64-linux-gnu libc-dev-sparc64-cross
            cflags: -static
            codecov: ubuntu_gcc_sparc64_compat

          - name: Ubuntu GCC S390X Compat
            os: ubuntu-latest
            compiler: s390x-linux-gnu-gcc
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-s390x.cmake -DZLIB_COMPAT=ON
            packages: qemu gcc-s390x-linux-gnu libc-dev-s390x-cross
            cflags: -static
            codecov: ubuntu_gcc_s390x_compat

          - name: Ubuntu Clang
            os: ubuntu-latest
            compiler: clang
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov
            codecov: ubuntu_clang

          - name: Ubuntu Clang Inflate Strict
            os: ubuntu-latest
            compiler: clang
            cmake-args: -DWITH_INFLATE_STRICT=ON
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov
            codecov: ubuntu_clang_inflate_strict

          - name: Ubuntu Clang Inflate Allow Invalid Dist
            os: ubuntu-latest
            compiler: clang
            cmake-args: -DWITH_INFLATE_ALLOW_INVALID_DIST=ON
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov
            codecov: ubuntu_clang_inflate_allow_invalid_dist

          - name: Ubuntu Clang Debug
            os: ubuntu-latest
            compiler: clang
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov
            codecov: ubuntu_clang_debug
            build-config: Debug

          - name: Ubuntu Clang MSAN
            os: ubuntu-latest
            compiler: clang
            cmake-args: -GNinja -DWITH_MSAN=ON
            packages:  ninja-build llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov
            cflags: -g3 -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-memory-track-origins
            codecov: ubuntu_clang_msan

          - name: Windows MSVC Win32
            os: windows-latest
            compiler: cl
            cmake-args: -A Win32

          - name: Windows MSVC Win64
            os: windows-latest
            compiler: cl
            cmake-args: -A x64

          - name: Windows GCC
            os: windows-latest
            compiler: gcc
            cmake-args: -G Ninja
            codecov: win64_gcc

          - name: Windows GCC Compat
            os: windows-latest
            compiler: gcc
            cmake-args: -G Ninja -DZLIB_COMPAT=ON -DWITH_NEW_STRATEGIES=OFF -DWITH_OPTIM=OFF
            codecov: win64_gcc_compat

          - name: Windows GCC Compat No Opt
            os: windows-latest
            compiler: gcc
            cmake-args: -G Ninja -DZLIB_COMPAT=ON -DWITH_NEW_STRATEGIES=OFF -DWITH_OPTIM=OFF
            codecov: win64_gcc_compat_no_opt

          - name: macOS Clang
            os: macOS-latest
            compiler: clang
            cmake-args: -DWITH_SANITIZERS=ON
            codecov: macos_clang

          - name: macOS GCC
            os: macOS-latest
            compiler: gcc
            cmake-args: -DWITH_SANITIZERS=ON
            codecov: macos_gcc

    steps:
    - uses: actions/checkout@v1

    - name: Install packages (Ubuntu)
      if: runner.os == 'Linux' && matrix.packages
      run: |
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.packages }}

    - name: Install packages (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ninja ${{ matrix.packages }}

    - name: Install packages (Windows/GCC)
      if: runner.os == 'Windows' && matrix.codecov && matrix.compiler == 'gcc'
      # Use gcov-7 via mingw on windows because gcov-8 throws tons of warnings
      # https://partner-bugzilla.redhat.com/show_bug.cgi?id=1577508
      run: |
        choco install mingw --version=7.3.0 --force --allow-downgrade

    - name: Install packages (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja ${{ matrix.packages }}

    - name: Install codecov.io tools
      if: matrix.codecov
      # Need to use special fork of codecov-python for Windows
      # https://github.com/codecov/codecov-python/pull/169
      run: |
        python -u -m pip -v install git+https://github.com/nmoinvaz/codecov-python.git@master

    - name: Generate project files
      # Shared libaries turned off for qemu ppc* and sparc & reduce code coverage sources
      # Gzip file operations turned on to reduce code coverage sources across multiple tests
      run: |
        mkdir ${{ matrix.build-dir || '.not-used' }}
        cd ${{ matrix.build-dir || '.' }}
        ${{ matrix.cmake-prefix }} cmake ${{ matrix.build-src-dir || '.' }} ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=${{ matrix.build-config || 'Release' }} -DBUILD_SHARED_LIBS=OFF -DWITH_GZFILEOP=ON -DWITH_FUZZERS=ON -DWITH_CODE_COVERAGE=ON -DWITH_MAINTAINER_WARNINGS=ON
      env:
        CC: ${{ matrix.compiler }}
        CFLAGS: ${{ matrix.cflags }}
        LDFLAGS: ${{ matrix.ldflags }}
        CI: true

    - name: Compile source code
      run: |
        cd ${{ matrix.build-dir || '.' }}
        ${{ matrix.cmake-prefix }} cmake --build . --config ${{ matrix.build-config || 'Release' }}

    - name: Run test cases
      run: |
        cd ${{ matrix.build-dir || '.' }}
        ctest -C Release --output-on-failure --max-width 120
      env:
        ASAN_OPTIONS: ${{ matrix.asan-options || 'verbosity=1' }}
        MSAN_OPTIONS: ${{ matrix.msan-options || 'verbosity=1' }}
        TSAN_OPTIONS: ${{ matrix.tsan-options || 'verbosity=1' }}
        LSAN_OPTIONS: ${{ matrix.lsan-options || 'verbosity=1' }}

    - name: Upload coverage report
      if: matrix.codecov && ( env.CODECOV_TOKEN_SECRET != '' || github.repository == 'zlib-ng/zlib-ng' )
      shell: bash
      run: |
        bash tools/codecov-upload.sh
      env:
        # Codecov does not yet support GitHub Actions
        CODECOV_TOKEN_SECRET: "${{secrets.CODECOV_TOKEN}}"
        CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN || 'e4fdf847-f541-4ab1-9d50-3d27e5913906' }}"
        CODECOV_FLAGS: "${{ matrix.codecov }}"
        CODECOV_NAME:  "${{ matrix.name }}"
        CODECOV_EXEC:  "${{ matrix.gcov-exec || 'gcov' }}"
        CODECOV_DIR:   "${{ matrix.build-dir || '.' }}"
